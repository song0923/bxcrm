<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="      
           http://www.springframework.org/schema/beans      
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd      
           http://www.springframework.org/schema/context      
           http://www.springframework.org/schema/context/spring-context-3.0.xsd     
           http://www.springframework.org/schema/mvc      
           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- 启动时扫描所有的controller -->
	<context:component-scan base-package="com.bx" />

	<!-- 主要作用于@Controller，激活该模式，下面是一种简写形式，完全可以手动配置替代这种简写形式， 它会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter，是spring 
		MVC为@Controllers分发请求所必须的 -->
	<mvc:annotation-driven />

	<!-- 配置js,css等静态文件直接映射到对应的文件夹，不被DispatcherServlet处理 -->
	<mvc:resources mapping="/images/**" location="/WEB-INF/images/"
		cache-period="31556926" />
	<mvc:resources mapping="/js/**" location="/WEB-INF/js/"
		cache-period="31556926" />
	<mvc:resources mapping="/css/**" location="/WEB-INF/css/"
		cache-period="31556926" />
	<mvc:resources mapping="/lib/**" location="/WEB-INF/lib/"
		cache-period="31556926" />


	<!-- jsp页面解析器，当Controller返回XXX字符串时，先通过拦截器，然后该类就会在/WEB-INF/views/目录下，查找XXX.jsp文件 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
	</bean>

	<!-- 指定connector连接信息的属性文件的位置 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 配置数据源,包含connector的驱动名称，地址，用户名以及密码 ,除了c3p0其实还有dbcp这种方式,但是hibernate官方已经宣布不再支持dbcp了 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${jdbc.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc.url}</value>
		</property>
		<property name="user">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="minPoolSize">
			<value>5</value>
		</property>
		<property name="maxPoolSize">
			<value>300</value>
		</property>
		<property name="acquireIncrement">
			<value>5</value>
		</property>
		<property name="maxIdleTime">
			<value>60</value>
		</property>
		<property name="initialPoolSize">
            <value>10</value>
        </property>
		<property name="maxStatements">
			<value>300</value>
		</property>
	</bean>
	
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 数据源事务管理 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Mybatis's sqlSessionFactory config -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>

</beans>